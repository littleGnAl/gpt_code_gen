/// GENERATED BY gpt_code_gen, DO NOT MODIFY BY HAND.
class MockIRtcEngine : public IRtcEngine {
public:
MOCK_METHOD(void, release, (bool sync), (override));

MOCK_METHOD(int, initialize, (const RtcEngineContext& context), (override));

MOCK_METHOD(int, queryInterface, (INTERFACE_ID_TYPE iid, void** inter), (override));

MOCK_METHOD(const char*, getVersion, (int* build), (override));

MOCK_METHOD(const char*, getErrorDescription, (int code), (const, override));

MOCK_METHOD(int, joinChannel, (const char* token, const char* channelId, const char* info, uid_t uid), (override));

MOCK_METHOD(int, joinChannel, (const char* token, const char* channelId, uid_t uid, const ChannelMediaOptions& options), (override));

MOCK_METHOD(int, updateChannelMediaOptions, (const ChannelMediaOptions& options), (override));

MOCK_METHOD(int, leaveChannel, (), (override));

MOCK_METHOD(int, leaveChannel, (const LeaveChannelOptions& options), (override));

MOCK_METHOD(int, renewToken, (const char* token), (override));

MOCK_METHOD(int, setChannelProfile, (CHANNEL_PROFILE_TYPE profile), (override));

MOCK_METHOD(int, setClientRole, (CLIENT_ROLE_TYPE role), (override));

MOCK_METHOD(int, setClientRole, (CLIENT_ROLE_TYPE role, const ClientRoleOptions& options), (override));

MOCK_METHOD(int, startEchoTest, (), (override));

MOCK_METHOD(int, startEchoTest, (int intervalInSeconds), (override));

MOCK_METHOD(int, startEchoTest, (const EchoTestConfiguration& config), (override));

MOCK_METHOD(int, stopEchoTest, (), (override));

#if defined(__APPLE__) && TARGET_OS_IOS
  MOCK_METHOD(int, enableMultiCamera, (bool enabled, const CameraCapturerConfiguration& config), (override));
#endif

MOCK_METHOD(int, enableVideo, (), (override));

MOCK_METHOD(int, disableVideo, (), (override));

MOCK_METHOD(int, startPreview, (), (override));

MOCK_METHOD(int, startPreview, (VIDEO_SOURCE_TYPE sourceType), (override));

MOCK_METHOD(int, stopPreview, (), (override));

MOCK_METHOD(int, stopPreview, (VIDEO_SOURCE_TYPE sourceType), (override));

MOCK_METHOD(int, startLastmileProbeTest, (const LastmileProbeConfig& config), (override));

MOCK_METHOD(int, stopLastmileProbeTest, (), (override));

MOCK_METHOD(int, setVideoEncoderConfiguration, (const VideoEncoderConfiguration& config), (override));

MOCK_METHOD(int, setBeautyEffectOptions, (bool enabled, const BeautyOptions& options, agora::media::MEDIA_SOURCE_TYPE type), (override));

MOCK_METHOD(int, setLowlightEnhanceOptions, (bool enabled, const LowlightEnhanceOptions& options, agora::media::MEDIA_SOURCE_TYPE type), (override));

MOCK_METHOD(int, setVideoDenoiserOptions, (bool enabled, const VideoDenoiserOptions& options, agora::media::MEDIA_SOURCE_TYPE type), (override));

MOCK_METHOD(int, setColorEnhanceOptions, (bool enabled, const ColorEnhanceOptions& options, agora::media::MEDIA_SOURCE_TYPE type), (override));

MOCK_METHOD(int, enableVirtualBackground, (bool enabled, VirtualBackgroundSource backgroundSource, SegmentationProperty segproperty, agora::media::MEDIA_SOURCE_TYPE type), (override));

MOCK_METHOD(int, setupRemoteVideo, (const VideoCanvas& canvas), (override));

MOCK_METHOD(int, setupLocalVideo, (const VideoCanvas& canvas), (override));

MOCK_METHOD(int, enableAudio, (), (override));

MOCK_METHOD(int, disableAudio, (), (override));

MOCK_METHOD(int, setAudioProfile, (AUDIO_PROFILE_TYPE profile), (override));

MOCK_METHOD(int, setAudioScenario, (AUDIO_SCENARIO_TYPE scenario), (override));

MOCK_METHOD(int, enableLocalAudio, (bool enabled), (override));

MOCK_METHOD(int, muteLocalAudioStream, (bool mute), (override));

MOCK_METHOD(int, muteAllRemoteAudioStreams, (bool mute), (override));

MOCK_METHOD(int, muteRemoteAudioStream, (uid_t uid, bool mute), (override));

MOCK_METHOD(int, muteLocalVideoStream, (bool mute), (override));

MOCK_METHOD(int, enableLocalVideo, (bool enabled), (override));

MOCK_METHOD(int, muteAllRemoteVideoStreams, (bool mute), (override));

MOCK_METHOD(int, muteRemoteVideoStream, (uid_t uid, bool mute), (override));

MOCK_METHOD(int, setRemoteVideoStreamType, (uid_t uid, VIDEO_STREAM_TYPE streamType), (override));

MOCK_METHOD(int, setRemoteVideoSubscriptionOptions, (uid_t uid, const VideoSubscriptionOptions& options), (override));

MOCK_METHOD(int, setRemoteDefaultVideoStreamType, (VIDEO_STREAM_TYPE streamType), (override));

MOCK_METHOD(int, setSubscribeAudioBlocklist, (uid_t* uidList, int uidNumber), (override));

MOCK_METHOD(int, setSubscribeAudioAllowlist, (uid_t* uidList, int uidNumber), (override));

MOCK_METHOD(int, setSubscribeVideoBlocklist, (uid_t* uidList, int uidNumber), (override));

MOCK_METHOD(int, setSubscribeVideoAllowlist, (uid_t* uidList, int uidNumber), (override));

MOCK_METHOD(int, enableAudioVolumeIndication, (int interval, int smooth, bool reportVad), (override));

MOCK_METHOD(int, startAudioRecording, (const char* filePath, AUDIO_RECORDING_QUALITY_TYPE quality), (override));

MOCK_METHOD(int, startAudioRecording, (const char* filePath, int sampleRate, AUDIO_RECORDING_QUALITY_TYPE quality), (override));

MOCK_METHOD(int, startAudioRecording, (const AudioRecordingConfiguration& config), (override));

MOCK_METHOD(int, registerAudioEncodedFrameObserver, (const AudioEncodedFrameObserverConfig& config, IAudioEncodedFrameObserver* observer), (override));

MOCK_METHOD(int, stopAudioRecording, (), (override));

MOCK_METHOD(agora_refptr<IMediaPlayer>, createMediaPlayer, (), (override));

MOCK_METHOD(int, destroyMediaPlayer, (agora_refptr<IMediaPlayer> media_player), (override));

MOCK_METHOD(int, startAudioMixing, (const char* filePath, bool loopback, int cycle), (override));

MOCK_METHOD(int, startAudioMixing, (const char* filePath, bool loopback, int cycle, int startPos), (override));

MOCK_METHOD(int, stopAudioMixing, (), (override));

MOCK_METHOD(int, pauseAudioMixing, (), (override));

MOCK_METHOD(int, resumeAudioMixing, (), (override));

MOCK_METHOD(int, selectAudioTrack, (int index), (override));

MOCK_METHOD(int, getAudioTrackCount, (), (override));

MOCK_METHOD(int, adjustAudioMixingVolume, (int volume), (override));

MOCK_METHOD(int, adjustAudioMixingPublishVolume, (int volume), (override));

MOCK_METHOD(int, getAudioMixingPublishVolume, (), (override));

MOCK_METHOD(int, adjustAudioMixingPlayoutVolume, (int volume), (override));

MOCK_METHOD(int, getAudioMixingPlayoutVolume, (), (override));

MOCK_METHOD(int, getAudioMixingDuration, (), (override));

MOCK_METHOD(int, getAudioMixingCurrentPosition, (), (override));

MOCK_METHOD(int, setAudioMixingPosition, (int pos), (override));

MOCK_METHOD(int, setAudioMixingDualMonoMode, (media::AUDIO_MIXING_DUAL_MONO_MODE mode), (override));

MOCK_METHOD(int, setAudioMixingPitch, (int pitch), (override));

MOCK_METHOD(int, getEffectsVolume, (), (override));

MOCK_METHOD(int, setEffectsVolume, (int volume), (override));

MOCK_METHOD(int, preloadEffect, (int soundId, const char* filePath, int startPos), (override));

MOCK_METHOD(int, playEffect, (int soundId, const char* filePath, int loopCount, double pitch, double pan, int gain, bool publish, int startPos), (override));

MOCK_METHOD(int, playAllEffects, (int loopCount, double pitch, double pan, int gain, bool publish), (override));

MOCK_METHOD(int, getVolumeOfEffect, (int soundId), (override));

MOCK_METHOD(int, setVolumeOfEffect, (int soundId, int volume), (override));

MOCK_METHOD(int, pauseEffect, (int soundId), (override));

MOCK_METHOD(int, pauseAllEffects, (), (override));

MOCK_METHOD(int, resumeEffect, (int soundId), (override));

MOCK_METHOD(int, resumeAllEffects, (), (override));

MOCK_METHOD(int, stopEffect, (int soundId), (override));

MOCK_METHOD(int, stopAllEffects, (), (override));

MOCK_METHOD(int, unloadEffect, (int soundId), (override));

MOCK_METHOD(int, unloadAllEffects, (), (override));

MOCK_METHOD(int, getEffectDuration, (const char* filePath), (override));

MOCK_METHOD(int, setEffectPosition, (int soundId, int pos), (override));

MOCK_METHOD(int, getEffectCurrentPosition, (int soundId), (override));

MOCK_METHOD(int, enableSoundPositionIndication, (bool enabled), (override));

MOCK_METHOD(int, setRemoteVoicePosition, (uid_t uid, double pan, double gain), (override));

MOCK_METHOD(int, enableSpatialAudio, (bool enabled), (override));

MOCK_METHOD(int, setRemoteUserSpatialAudioParams, (uid_t uid, const agora::SpatialAudioParams& params), (override));

MOCK_METHOD(int, setVoiceBeautifierPreset, (VOICE_BEAUTIFIER_PRESET preset), (override));

MOCK_METHOD(int, setAudioEffectPreset, (AUDIO_EFFECT_PRESET preset), (override));

MOCK_METHOD(int, setVoiceConversionPreset, (VOICE_CONVERSION_PRESET preset), (override));

MOCK_METHOD(int, setAudioEffectParameters, (AUDIO_EFFECT_PRESET preset, int param1, int param2), (override));

MOCK_METHOD(int, setVoiceBeautifierParameters, (VOICE_BEAUTIFIER_PRESET preset, int param1, int param2), (override));

MOCK_METHOD(int, setVoiceConversionParameters, (VOICE_CONVERSION_PRESET preset, int param1, int param2), (override));

MOCK_METHOD(int, setLocalVoicePitch, (double pitch), (override));

MOCK_METHOD(int, setLocalVoiceEqualization, (AUDIO_EQUALIZATION_BAND_FREQUENCY bandFrequency, int bandGain), (override));

MOCK_METHOD(int, setLocalVoiceReverb, (AUDIO_REVERB_TYPE reverbKey, int value), (override));

MOCK_METHOD(int, setHeadphoneEQPreset, (HEADPHONE_EQUALIZER_PRESET preset), (override));

MOCK_METHOD(int, setHeadphoneEQParameters, (int lowGain, int highGain), (override));

MOCK_METHOD(int, setLogFile, (const char* filePath), (override));

MOCK_METHOD(int, setLogFilter, (unsigned int filter), (override));

MOCK_METHOD(int, setLogLevel, (commons::LOG_LEVEL level), (override));

MOCK_METHOD(int, setLogFileSize, (unsigned int fileSizeInKBytes), (override));

MOCK_METHOD(int, uploadLogFile, (agora::util::AString& requestId), (override));

MOCK_METHOD(int, setLocalRenderMode, (media::base::RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode), (override));

MOCK_METHOD(int, setRemoteRenderMode, (uid_t uid, media::base::RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode), (override));

MOCK_METHOD(int, setLocalRenderMode, (media::base::RENDER_MODE_TYPE renderMode), (override));

MOCK_METHOD(int, setLocalVideoMirrorMode, (VIDEO_MIRROR_MODE_TYPE mirrorMode), (override));

MOCK_METHOD(int, enableDualStreamMode, (bool enabled), (override));

MOCK_METHOD(int, enableDualStreamMode, (bool enabled, const SimulcastStreamConfig& streamConfig), (override));

MOCK_METHOD(int, setDualStreamMode, (SIMULCAST_STREAM_MODE mode), (override));

MOCK_METHOD(int, setDualStreamMode, (SIMULCAST_STREAM_MODE mode, const SimulcastStreamConfig& streamConfig), (override));

MOCK_METHOD(int, enableEchoCancellationExternal, (bool enabled, int audioSourceDelay), (override));

MOCK_METHOD(int, enableCustomAudioLocalPlayback, (int sourceId, bool enabled), (override));

MOCK_METHOD(int, startPrimaryCustomAudioTrack, (const AudioTrackConfig& config), (override));

MOCK_METHOD(int, stopPrimaryCustomAudioTrack, (), (override));

MOCK_METHOD(int, startSecondaryCustomAudioTrack, (const AudioTrackConfig& config), (override));

MOCK_METHOD(int, stopSecondaryCustomAudioTrack, (), (override));

MOCK_METHOD(int, setRecordingAudioFrameParameters, (int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall), (override));

MOCK_METHOD(int, setPlaybackAudioFrameParameters, (int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall), (override));

MOCK_METHOD(int, setMixedAudioFrameParameters, (int sampleRate, int channel, int samplesPerCall), (override));

MOCK_METHOD(int, setEarMonitoringAudioFrameParameters, (int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall), (override));

MOCK_METHOD(int, setPlaybackAudioFrameBeforeMixingParameters, (int sampleRate, int channel), (override));

MOCK_METHOD(int, enableAudioSpectrumMonitor, (int intervalInMS), (override));

MOCK_METHOD(int, disableAudioSpectrumMonitor, (), (override));

MOCK_METHOD(int, registerAudioSpectrumObserver, (agora::media::IAudioSpectrumObserver* observer), (override));

MOCK_METHOD(int, unregisterAudioSpectrumObserver, (agora::media::IAudioSpectrumObserver* observer), (override));

MOCK_METHOD(int, adjustRecordingSignalVolume, (int volume), (override));

MOCK_METHOD(int, muteRecordingSignal, (bool mute), (override));

MOCK_METHOD(int, adjustPlaybackSignalVolume, (int volume), (override));

MOCK_METHOD(int, adjustUserPlaybackSignalVolume, (unsigned int uid, int volume), (override));

MOCK_METHOD(int, setLocalPublishFallbackOption, (STREAM_FALLBACK_OPTIONS option), (override));

MOCK_METHOD(int, setRemoteSubscribeFallbackOption, (STREAM_FALLBACK_OPTIONS option), (override));

MOCK_METHOD(int, enableLoopbackRecording, (bool enabled, const char* deviceName), (override));

MOCK_METHOD(int, adjustLoopbackSignalVolume, (int volume), (override));

MOCK_METHOD(int, getLoopbackRecordingVolume, (), (override));

MOCK_METHOD(int, enableInEarMonitoring, (bool enabled, int includeAudioFilters), (override));

MOCK_METHOD(int, setInEarMonitoringVolume, (int volume), (override));

#if defined(_WIN32) || defined(__linux__) || defined(__ANDROID__)
  MOCK_METHOD(int, loadExtensionProvider, (const char* path, bool unload_after_use), (override));
#endif

MOCK_METHOD(int, setExtensionProviderProperty, (const char* provider, const char* key, const char* value), (override));

MOCK_METHOD(int, registerExtension, (const char* provider, const char* extension, agora::media::MEDIA_SOURCE_TYPE type), (override));

MOCK_METHOD(int, enableExtension, (const char* provider, const char* extension, bool enable, agora::media::MEDIA_SOURCE_TYPE type), (override));

MOCK_METHOD(int, setExtensionProperty, (const char* provider, const char* extension, const char* key, const char* value, agora::media::MEDIA_SOURCE_TYPE type), (override));

MOCK_METHOD(int, getExtensionProperty, (const char* provider, const char* extension, const char* key, char* value, int buf_len, agora::media::MEDIA_SOURCE_TYPE type), (override));

MOCK_METHOD(int, enableExtension, (const char* provider, const char* extension, const ExtensionInfo& extensionInfo, bool enable), (override));

MOCK_METHOD(int, setExtensionProperty, (const char* provider, const char* extension, const ExtensionInfo& extensionInfo, const char* key, const char* value), (override));

MOCK_METHOD(int, setCameraCapturerConfiguration, (const CameraCapturerConfiguration& config), (override));

MOCK_METHOD(video_track_id_t, createCustomVideoTrack, (), (override));

MOCK_METHOD(video_track_id_t, createCustomEncodedVideoTrack, (const SenderOptions& sender_option), (override));

MOCK_METHOD(int, destroyCustomVideoTrack, (video_track_id_t video_track_id), (override));

MOCK_METHOD(int, destroyCustomEncodedVideoTrack, (video_track_id_t video_track_id), (override));

#if defined(__ANDROID__) || (defined(__APPLE__) && TARGET_OS_IOS)
  MOCK_METHOD(int, switchCamera, (), (override));

  MOCK_METHOD(bool, isCameraZoomSupported, (), (override));

  MOCK_METHOD(bool, isCameraFaceDetectSupported, (), (override));

  MOCK_METHOD(bool, isCameraTorchSupported, (), (override));

  MOCK_METHOD(bool, isCameraFocusSupported, (), (override));

  MOCK_METHOD(bool, isCameraAutoFocusFaceModeSupported, (), (override));

  MOCK_METHOD(int, setCameraZoomFactor, (float factor), (override));

  MOCK_METHOD(int, enableFaceDetection, (bool enabled), (override));

  MOCK_METHOD(float, getCameraMaxZoomFactor, (), (override));

  MOCK_METHOD(int, setCameraFocusPositionInPreview, (float positionX, float positionY), (override));

  MOCK_METHOD(int, setCameraTorchOn, (bool isOn), (override));

  MOCK_METHOD(int, setCameraAutoFocusFaceModeEnabled, (bool enabled), (override));

  MOCK_METHOD(bool, isCameraExposurePositionSupported, (), (override));

  MOCK_METHOD(int, setCameraExposurePosition, (float positionXinView, float positionYinView), (override));

#if defined(__APPLE__)
  MOCK_METHOD(bool, isCameraAutoExposureFaceModeSupported, (), (override));

  MOCK_METHOD(int, setCameraAutoExposureFaceModeEnabled, (bool enabled), (override));
#endif

  MOCK_METHOD(int, setDefaultAudioRouteToSpeakerphone, (bool defaultToSpeaker), (override));

  MOCK_METHOD(int, setEnableSpeakerphone, (bool speakerOn), (override));

  MOCK_METHOD(bool, isSpeakerphoneEnabled, (), (override));
#endif

#if defined(_WIN32) || (defined(__APPLE__) && TARGET_OS_MAC && !TARGET_OS_IPHONE)
  MOCK_METHOD(IScreenCaptureSourceList*, getScreenCaptureSources, (const SIZE& thumbSize, const SIZE& iconSize, const bool includeScreen), (override));
#endif

#if (defined(__APPLE__) && TARGET_OS_IOS)
  MOCK_METHOD(int, setAudioSessionOperationRestriction, (AUDIO_SESSION_OPERATION_RESTRICTION restriction), (override));
#endif

#if defined(_WIN32) || (defined(__APPLE__) && !TARGET_OS_IPHONE && TARGET_OS_MAC)
  MOCK_METHOD(int, startScreenCaptureByDisplayId, (uint32_t displayId, const Rectangle& regionRect,
                                            const ScreenCaptureParameters& captureParams), (override));
#endif

#if defined(_WIN32)
  MOCK_METHOD(int, startScreenCaptureByScreenRect, (const Rectangle& screenRect,
                                                     const Rectangle& regionRect,
                                                     const ScreenCaptureParameters& captureParams), (override));
#endif

#if defined(__ANDROID__)
  MOCK_METHOD(int, getAudioDeviceInfo, (DeviceInfo& deviceInfo), (override));
#endif

#if defined(_WIN32) || (defined(__APPLE__) && TARGET_OS_MAC && !TARGET_OS_IPHONE)
  MOCK_METHOD(int, startScreenCaptureByWindowId, (view_t windowId, const Rectangle& regionRect,
                                           const ScreenCaptureParameters& captureParams), (override));

  MOCK_METHOD(int, setScreenCaptureContentHint, (VIDEO_CONTENT_HINT contentHint), (override));

  MOCK_METHOD(int, setScreenCaptureScenario, (SCREEN_SCENARIO_TYPE screenScenario), (override));

  MOCK_METHOD(int, updateScreenCaptureRegion, (const Rectangle& regionRect), (override));

  MOCK_METHOD(int, updateScreenCaptureParameters, (const ScreenCaptureParameters& captureParams), (override));
#endif

#if defined(__ANDROID__) || (defined(__APPLE__) && TARGET_OS_IOS)
  MOCK_METHOD(int, startScreenCapture, (const ScreenCaptureParameters2& captureParams), (override));

  MOCK_METHOD(int, updateScreenCapture, (const ScreenCaptureParameters2& captureParams), (override));
#endif

#if defined(_WIN32) || defined(__APPLE__) || defined(__ANDROID__)
  MOCK_METHOD(int, stopScreenCapture, (), (override));
#endif

MOCK_METHOD(int, getCallId, (agora::util::AString& callId), (override));

MOCK_METHOD(int, rate, (const char* callId, int rating, const char* description), (override));

MOCK_METHOD(int, complain, (const char* callId, const char* description), (override));

MOCK_METHOD(int, startRtmpStreamWithoutTranscoding, (const char* url), (override));

MOCK_METHOD(int, startRtmpStreamWithTranscoding, (const char* url, const LiveTranscoding& transcoding), (override));

MOCK_METHOD(int, updateRtmpTranscoding, (const LiveTranscoding& transcoding), (override));

MOCK_METHOD(int, stopRtmpStream, (const char* url), (override));

MOCK_METHOD(int, startLocalVideoTranscoder, (const LocalTranscoderConfiguration& config), (override));

MOCK_METHOD(int, stopLocalVideoTranscoder, (), (override));

MOCK_METHOD(int, startPrimaryCameraCapture, (const CameraCapturerConfiguration& config), (override));

MOCK_METHOD(int, startSecondaryCameraCapture, (const CameraCapturerConfiguration& config), (override));

MOCK_METHOD(int, stopPrimaryCameraCapture, (), (override));

MOCK_METHOD(int, stopSecondaryCameraCapture, (), (override));

MOCK_METHOD(int, setCameraDeviceOrientation, (VIDEO_SOURCE_TYPE type, VIDEO_ORIENTATION orientation), (override));

MOCK_METHOD(int, setScreenCaptureOrientation, (VIDEO_SOURCE_TYPE type, VIDEO_ORIENTATION orientation), (override));

MOCK_METHOD(int, startPrimaryScreenCapture, (const ScreenCaptureConfiguration& config), (override));

MOCK_METHOD(int, startSecondaryScreenCapture, (const ScreenCaptureConfiguration& config), (override));

MOCK_METHOD(int, stopPrimaryScreenCapture, (), (override));

MOCK_METHOD(int, stopSecondaryScreenCapture, (), (override));

MOCK_METHOD(CONNECTION_STATE_TYPE, getConnectionState, (), (override));

MOCK_METHOD(bool, registerEventHandler, (IRtcEngineEventHandler* eventHandler), (override));

MOCK_METHOD(int, setRemoteUserPriority, (uid_t uid, PRIORITY_TYPE userPriority), (override));

MOCK_METHOD(int, registerPacketObserver, (IPacketObserver* observer), (override));

MOCK_METHOD(int, enableEncryption, (bool enabled, const EncryptionConfig& config), (override));

MOCK_METHOD(int, createDataStream, (int* streamId, bool reliable, bool ordered), (override));

MOCK_METHOD(int, createDataStream, (int* streamId, DataStreamConfig& config), (override));

MOCK_METHOD(int, sendStreamMessage, (int streamId, const char* data, size_t length), (override));

MOCK_METHOD(int, addVideoWatermark, (const RtcImage& watermark), (override));

MOCK_METHOD(int, addVideoWatermark, (const char* watermarkUrl, const WatermarkOptions& options), (override));

MOCK_METHOD(int, clearVideoWatermarks, (), (override));

MOCK_METHOD(int, sendCustomReportMessage, (const char* id, const char* category, const char* event, const char* label, int value), (override));

MOCK_METHOD(int, registerMediaMetadataObserver, (IMetadataObserver* observer, IMetadataObserver::METADATA_TYPE type), (override));

MOCK_METHOD(int, unregisterMediaMetadataObserver, (IMetadataObserver* observer, IMetadataObserver::METADATA_TYPE type), (override));

MOCK_METHOD(int, startAudioFrameDump, (const char* channel_id, uid_t user_id, const char* location,
      const char* uuid, const char* passwd, long duration_ms, bool auto_upload), (override));

MOCK_METHOD(int, stopAudioFrameDump, (const char* channel_id, uid_t user_id, const char* location), (override));

MOCK_METHOD(int, registerLocalUserAccount, (const char* appId, const char* userAccount), (override));

MOCK_METHOD(int, joinChannelWithUserAccount, (const char* token, const char* channelId, const char* userAccount), (override));

MOCK_METHOD(int, joinChannelWithUserAccount, (const char* token, const char* channelId, const char* userAccount, const ChannelMediaOptions& options), (override));

MOCK_METHOD(int, joinChannelWithUserAccountEx, (const char* token, const char* channelId, const char* userAccount, const ChannelMediaOptions& options, IRtcEngineEventHandler* eventHandler), (override));

MOCK_METHOD(int, getUserInfoByUserAccount, (const char* userAccount, rtc::UserInfo* userInfo), (override));

MOCK_METHOD(int, getUserInfoByUid, (uid_t uid, rtc::UserInfo* userInfo), (override));

MOCK_METHOD(int, startChannelMediaRelay, (const ChannelMediaRelayConfiguration& configuration), (override));

MOCK_METHOD(int, updateChannelMediaRelay, (const ChannelMediaRelayConfiguration& configuration), (override));

MOCK_METHOD(int, stopChannelMediaRelay, (), (override));

MOCK_METHOD(int, pauseAllChannelMediaRelay, (), (override));

MOCK_METHOD(int, resumeAllChannelMediaRelay, (), (override));

MOCK_METHOD(int, setDirectCdnStreamingAudioConfiguration, (AUDIO_PROFILE_TYPE profile), (override));

MOCK_METHOD(int, setDirectCdnStreamingVideoConfiguration, (const VideoEncoderConfiguration& config), (override));

MOCK_METHOD(int, startDirectCdnStreaming, (IDirectCdnStreamingEventHandler* eventHandler, const char* publishUrl, const DirectCdnStreamingMediaOptions& options), (override));

MOCK_METHOD(int, stopDirectCdnStreaming, (), (override));

MOCK_METHOD(int, updateDirectCdnStreamingMediaOptions, (const DirectCdnStreamingMediaOptions& options), (override));

MOCK_METHOD(int, startRhythmPlayer, (const char* sound1, const char* sound2, const AgoraRhythmPlayerConfig& config), (override));

MOCK_METHOD(int, stopRhythmPlayer, (), (override));

MOCK_METHOD(int, configRhythmPlayer, (const AgoraRhythmPlayerConfig& config), (override));

MOCK_METHOD(int, enableContentInspect, (bool enabled, const media::ContentInspectConfig& config), (override));

MOCK_METHOD(int, adjustCustomAudioPublishVolume, (int32_t sourceId, int volume), (override));

MOCK_METHOD(int, adjustCustomAudioPlayoutVolume, (int32_t sourceId, int volume), (override));

MOCK_METHOD(int, setCloudProxy, (CLOUD_PROXY_TYPE proxyType), (override));

MOCK_METHOD(int, setLocalAccessPoint, (const LocalAccessPointConfiguration& config), (override));

MOCK_METHOD(int, setAdvancedAudioOptions, (AdvancedAudioOptions& options, int sourceType), (override));

MOCK_METHOD(int, setAVSyncSource, (const char* channelId, uid_t uid), (override));

MOCK_METHOD(int, enableVideoImageSource, (bool enable, const ImageTrackOptions& options), (override));

MOCK_METHOD(int64_t, getCurrentMonotonicTimeInMs, (), (override));

MOCK_METHOD(int, enableWirelessAccelerate, (bool enabled), (override));

MOCK_METHOD(int, getNetworkType, (), (override));

MOCK_METHOD(int, setParameters, (const char* parameters), (override));

MOCK_METHOD(int, startMediaRenderingTracing, (), (override));

MOCK_METHOD(int, enableInstantMediaRendering, (), (override));
};